		.data
list:	.word 0:10
str1: .asciiz "Introduza um n√∫mero: "

		.text
		.globl main
main:	#####
			# $s0 <- thereIsSwap
			# $s1 <- i
			# $s2 <- aux
			# ###
			# $t0 <- list
			# $t1 <- list[i]
			# $t2 <- list[i + 1]
			# $t3 <- &list[i]
			# $t4 <- &list[i + 1]
			# ##
			# $t8 <- tmp1
			# $t9 <- tmp2
			#####
			
			la $a0, list
			ori $a1, $0, 10
			jal fillArray
			
			la $t0, list
do1:	ori $s0, $0, 0					# thereIsSwap = false
			ori $s1, $0, 0					# i = 0
for2:	slti $t8, $s1, 9				# tmp1 = i < 10 - 1
			bne $t8, 1, endfor2			# tmp1 != 1 ? endfor2 : continue
			sll $t3, $s1, 2					# &list[i]_t = i * 4
			add $t3, $t0, $t3				# &list[i] = list + &list[i]_t
			lw $t1, 0($t3)					# list[i] = *(&list[i])
			addi $t4, $s1, 1				# &list[i + 1]_t = i + 1
			sll $t4, $t4, 2					# &list[i + 1]_t = &list[i + 1]_t * 4
			add $t4, $t0, $t4				# &list[i + 1] = list + &list[i + 1]_t
			lw $t2, 0($t4)					# list[i + 1] = *(&list[i + 1])
			slt $t8, $t2, $t1				# tmp1 = list[i + 1] < list[i]
			bne $t8, 1, endif3			# tmp1 != 1 ? endif3 : continue
			or $s2, $0, $t1					# aux = list[i]
			sw $t2, 0($t3)					# *list[i] = list[i + 1]
			sw $s2, 0($t4)					# *list[i + 1] = aux
			ori $s0, $0, 1					# thereIsSwap = true
endif3:
			addi $s1, $s1, 1				# i++
			j for2
endfor2:
			beq $s0, 0, enddo1			# thereIsSwap == false ? enddo1 : continue
			j do1
enddo1:
			ori $v0, $0, 10
			syscall
			
			
fillArray:
			#####
			# $a0 <- arr
			# $a1 <- len(arr)
			# ###
			#	$s0 <- i
			# $s1 <- arr
			# $s2 <- len(arr)
			# ##
			# $t0 <- arr[i]
			# ##
			# $t8 <- tmp1
			# $t9 <- tmp2
			#####
			addi $sp, $sp, -12
			sw $s0, 0($sp)
			sw $s1, 4($sp)
			sw $s2, 8($sp)
			
			move $s1, $a0
			move $s2, $a1
			ori $s0, $0, 0				# i = 0
fA_for1:
			slt $t8, $s0, $s2			# tmp1 = i < len(arr)
			beq $t8, $0, fA_endfor1	# tmp1 == 0 ? continue : endfor1
			# print_str
			la $a0, str1
			ori $v0, $0, 4
			syscall
			# /
			# read_int
			ori $v0, $0, 5
			syscall
			# /
			sll $t0, $s0, 2				# &arr[i]_t = i * 4
			add $t0, $s1, $t0			# &arr[i] = list + &arr[i]_t
			sw $v0, 0($t0)				# arr[i] = read_int
			addi $s0, $s0, 1			# i++
			j fA_for1								# loop fA_for1
fA_endfor1:
			lw $s0, 0($sp)
			lw $s1, 4($sp)
			lw $s2, 8($sp)
			addi $sp, $sp 12
			jr $ra
